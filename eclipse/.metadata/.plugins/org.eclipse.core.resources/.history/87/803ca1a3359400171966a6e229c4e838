package com.TominoCZ.FBP.particle;

import javax.annotation.Nullable;

import com.TominoCZ.FBP.FBP;
import com.TominoCZ.FBP.keys.FBPKeyBindings;

import net.minecraft.block.state.IBlockState;
import net.minecraft.client.Minecraft;
import net.minecraft.client.particle.Particle;
import net.minecraft.client.particle.ParticleDigging;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.VertexBuffer;
import net.minecraft.entity.Entity;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.math.Vec2f;
import net.minecraft.util.math.Vec3d;
import net.minecraft.world.World;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;

@SideOnly(Side.CLIENT)
public class FBPParticleSnow extends ParticleDigging {
	private final IBlockState sourceState;

	Minecraft mc;

	double scaleAlpha, prevParticleScale, prevParticleAlpha;

	double angleX, angleY, angleZ, prevAngleX, prevAngleY, prevAngleZ, randomXd, randomYd, randomZd;

	boolean modeDebounce = false;

	double endMult = 1;

	double step;

	float AngleY;

	float brightness = 1;

	Vec2f[] par;

	public FBPParticleSnow(World worldIn, double xCoordIn, double yCoordIn, double zCoordIn, double xSpeedIn,
			double ySpeedIn, double zSpeedIn, IBlockState state) {
		super(worldIn, xCoordIn, yCoordIn, zCoordIn, xSpeedIn, ySpeedIn, zSpeedIn, state);

		randomXd = FBP.random.nextDouble();
		randomYd = FBP.random.nextDouble();
		randomZd = FBP.random.nextDouble();

		try {
			FBP.setSourcePos.invokeExact((ParticleDigging) this, new BlockPos(xCoordIn, yCoordIn, zCoordIn));
		} catch (Throwable e1) {
			e1.printStackTrace();
		}

		step = FBP.rotationMult;

		if (randomXd <= 0.5)
			angleX += step;
		else
			angleX -= step;

		if (randomYd <= 0.5)
			angleY += step;
		else
			angleY -= step;

		if (randomZd <= 0.5)
			angleZ += step;
		else
			angleZ -= step;

		this.motionX = xSpeedIn;
		this.motionY = ySpeedIn;
		this.motionZ = zSpeedIn;
		this.particleGravity = 1f;
		sourceState = state;

		mc = Minecraft.getMinecraft();
		this.particleTexture = mc.getBlockRendererDispatcher().getModelForState(state).getParticleTexture();

		particleScale *= FBP.scaleMult * 4.0F;
		particleMaxAge = (int) FBP.random.nextDouble(55, 75);
		this.particleRed = this.particleGreen = this.particleBlue = 0.7F + (0.25F * mc.gameSettings.gammaSetting);

		scaleAlpha = particleScale * 0.75;

		AngleY = rand.nextFloat() * 80;
	}

	@Override
	public void setParticleTextureIndex(int particleTextureIndex) {

	}

	public Particle MultiplyVelocity(float multiplier) {
		this.motionX *= (double) multiplier;
		this.motionY = (this.motionY - 0.10000000149011612D) * (multiplier / 2) + 0.10000000149011612D;
		this.motionZ *= (double) multiplier;
		return this;
	}

	protected void multiplyColor(@Nullable BlockPos p_187154_1_) {
		int i = mc.getBlockColors().colorMultiplier(this.sourceState, this.worldObj, p_187154_1_, 0);
		this.particleRed *= (float) (i >> 16 & 255) / 255.0F;
		this.particleGreen *= (float) (i >> 8 & 255) / 255.0F;
		this.particleBlue *= (float) (i & 255) / 255.0F;
	}

	public int getFXLayer() {
		return 1;
	}

	@Override
	public void onUpdate() {
		prevAngleX = angleX;
		prevAngleY = angleY;
		prevAngleZ = angleZ;

		prevPosX = posX;
		prevPosY = posY;
		prevPosZ = posZ;

		prevParticleAlpha = particleAlpha;
		prevParticleScale = particleScale;

		if (!mc.isGamePaused()) {
			particleAge++;

			if (randomXd <= 0.5)
				angleX += step;
			else
				angleX -= step;

			if (randomYd <= 0.5)
				angleY += step;
			else
				angleY -= step;

			if (randomZd <= 0.5)
				angleZ += step;
			else
				angleZ -= step;

			if (this.particleAge >= this.particleMaxAge) {
				if (FBP.randomFadingSpeed)
					particleScale *= 0.75F * endMult;
				else
					particleScale *= 0.75F;

				if (particleAlpha > 0.01 && particleScale <= scaleAlpha) {
					if (FBP.randomFadingSpeed)
						particleAlpha *= 0.65F * endMult;
					else
						particleAlpha *= 0.65F;
				}

				if (particleAlpha <= 0.01)
					setExpired();
			}

			motionY -= 0.04D * (double) this.particleGravity;
			moveEntity(motionX, motionY, motionZ);

			motionX *= 0.9400000190734863D;
			motionY *= 0.8100000190734863D;
			motionZ *= 0.9400000190734863D;
		}
	}

	public void renderParticle(VertexBuffer worldRendererIn, Entity entityIn, float partialTicks, float rotationX,
			float rotationZ, float rotationYZ, float rotationXY, float rotationXZ) {
		if (!FBP.isEnabled() && particleMaxAge != 0)
			particleMaxAge = 0;
		if (FBPKeyBindings.FBPSweep.isKeyDown()) {
			this.isExpired = true;
			return;
		}

		if (particleAge < 5)
			return;

		float f = 0, f1 = 0, f2 = 0, f3 = 0;

		if (particleTexture != null) {
			if (!FBP.cartoonMode) {
				f = particleTexture.getInterpolatedU((double) (particleTextureJitterX / 4 * 16));
				f2 = particleTexture.getInterpolatedV((double) (particleTextureJitterY / 4 * 16));
			}

			f1 = particleTexture.getInterpolatedU((double) ((particleTextureJitterX + 1) / 4 * 16));
			f3 = particleTexture.getInterpolatedV((double) ((particleTextureJitterY + 1) / 4 * 16));
		} else {
			f = ((float) particleTextureIndexX + particleTextureJitterX / 4) / 16;
			f1 = f + 0.015609375F;
			f2 = ((float) particleTextureIndexY + particleTextureJitterY / 4) / 16;
			f3 = f2 + 0.015609375F;
		}

		float f5 = (float) (prevPosX + (posX - prevPosX) * (double) partialTicks - interpPosX);
		float f6 = (float) (prevPosY + (posY - prevPosY) * (double) partialTicks - interpPosY) + 0.01275F;
		float f7 = (float) (prevPosZ + (posZ - prevPosZ) * (double) partialTicks - interpPosZ);

		int i = getBrightnessForRender(partialTicks);

		float alpha = particleAlpha;

		// SMOOTH TRANSITION
		float f4 = (float) (prevParticleScale + (particleScale - prevParticleScale) * partialTicks);

		double AngleX = 0, AngleY = 0, AngleZ = 0;

		if (FBP.rotationMult > 0) {
			AngleY = angleY;
			AngleZ = angleZ;

			if (!FBP.randomRotation)
				AngleX = angleX;

			// SMOOTH ROTATION
			if (FBP.smoothTransitions && !FBP.frozen) {
				if (FBP.randomRotation) {
					AngleY = prevAngleY + (angleY - prevAngleY) * partialTicks;

					AngleZ = prevAngleZ + (angleZ - prevAngleZ) * partialTicks;
				} else
					AngleX = prevAngleX + (angleX - prevAngleX) * partialTicks;
			}
		}

		// RENDER
		GlStateManager.enableCull();
		GlStateManager.enableBlend();
		GlStateManager.enableAlpha();

		par = new Vec2f[] { 
				new Vec2f(f1, f3),
				new Vec2f(f1, f2),
				new Vec2f(f, f2),
				new Vec2f(f, f3) };

		worldRendererIn.setTranslation(f5, f6, f7);
		putCube(worldRendererIn, f4 / 20, (float) AngleX, (float) AngleY, (float) AngleZ, i >> 16 & 65535, i & 65535,
				particleRed, particleGreen, particleBlue, alpha, FBP.cartoonMode);

		worldRendererIn.setTranslation(0, 0, 0);
	}

	public void putCube(VertexBuffer buff, double scale, double rotX, double rotY, double rotZ, int j, int k, float r,
			float g, float b, float a, boolean cartoon) {
		brightness = 1;

		float R = 0;
		float G = 0;
		float B = 0;

		for (int i = 0; i < FBP.CUBE.length; i += 4) {
			Vec3d v1 = FBP.CUBE[i];
			Vec3d v2 = FBP.CUBE[i + 1];
			Vec3d v3 = FBP.CUBE[i + 2];
			Vec3d v4 = FBP.CUBE[i + 3];

			v1 = rotatef(v1, (float) Math.toRadians(rotX), (float) Math.toRadians(rotY), (float) Math.toRadians(rotZ));
			v2 = rotatef(v2, (float) Math.toRadians(rotX), (float) Math.toRadians(rotY), (float) Math.toRadians(rotZ));
			v3 = rotatef(v3, (float) Math.toRadians(rotX), (float) Math.toRadians(rotY), (float) Math.toRadians(rotZ));
			v4 = rotatef(v4, (float) Math.toRadians(rotX), (float) Math.toRadians(rotY), (float) Math.toRadians(rotZ));

			R = r * brightness;
			G = g * brightness;
			B = b * brightness;

			brightness *= 0.935;

			if (!cartoon) {
				addVt(buff, scale, v1, par[0].x, par[0].y, j, k, R, G, B, a);
				addVt(buff, scale, v2, par[1].x, par[1].y, j, k, R, G, B, a);
				addVt(buff, scale, v3, par[2].x, par[2].y, j, k, R, G, B, a);
				addVt(buff, scale, v4, par[3].x, par[3].y, j, k, R, G, B, a);
			} else {
				addVt(buff, scale, v1, par[0].x, par[0].y, j, k, R, G, B, a);
				addVt(buff, scale, v2, par[0].x, par[0].y, j, k, R, G, B, a);
				addVt(buff, scale, v3, par[0].x, par[0].y, j, k, R, G, B, a);
				addVt(buff, scale, v4, par[0].x, par[0].y, j, k, R, G, B, a);
			}
		}
	}

	private void addVt(VertexBuffer buff, double scale, Vec3d pos, double u, double v, int j, int k, float r, float g,
			float b, float a) {
		buff.pos(pos.xCoord * scale, pos.yCoord * scale, pos.zCoord * scale).tex(u, v).color(r, g, b, a).lightmap(j, k)
				.endVertex();
	}

	Vec3d rotatef(Vec3d vec, float AngleX, float AngleY, float AngleZ) {
		double sinAngleX = MathHelper.sin(AngleX);
		double sinAngleY = MathHelper.sin(AngleY);
		double sinAngleZ = MathHelper.sin(AngleZ);

		double cosAngleX = MathHelper.cos(AngleX);
		double cosAngleY = MathHelper.cos(AngleY);
		double cosAngleZ = MathHelper.cos(AngleZ);

		vec = new Vec3d(vec.xCoord, vec.yCoord * cosAngleX - vec.zCoord * sinAngleX,
				vec.yCoord * sinAngleX + vec.zCoord * cosAngleX);
		vec = new Vec3d(vec.xCoord * cosAngleY + vec.zCoord * sinAngleY, vec.yCoord,
				vec.xCoord * sinAngleY - vec.zCoord * cosAngleY);
		vec = new Vec3d(vec.xCoord * cosAngleZ - vec.yCoord * sinAngleZ,
				vec.xCoord * sinAngleZ + vec.yCoord * cosAngleZ, vec.zCoord);

		return vec;
	}

	public int getBrightnessForRender(float p_189214_1_) {
		int i = super.getBrightnessForRender(p_189214_1_);
		int j = 0;

		if (this.worldObj.isBlockLoaded(new BlockPos(posX, posY, posZ))) {
			j = this.worldObj.getCombinedLight(new BlockPos(posX, posY, posZ), 0);
		}

		return i == 0 ? j : i;
	}
}